@model IEnumerable<LiveCode.Models.Mercury>

@{
    ViewBag.Title = "Mercury";
}





<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.min.js"></script>


<h1>Chart.JS using JSON</h1>

<canvas id="canvas"></canvas>



<script>


    var Yaxis = [];
    var Xaxis = [];

        function drawLineChart() {

            $.ajaxSetup({ async: false});
            $.ajax({
                url: 'http://sql2json.azurewebsites.net/api/Mercuries',
                dataType: 'json',
                type: 'get',
                cache: true,
                success: function(data) {
                    $(data).each(function (index, value) {
                        //console.log(value.hg);
                        //console.log(value.mercury_Id);
                        //Yaxis.push(parseFloat(value.hg));
                        //Xaxis.push(new Date(value.dateTimeStart).toString());
                        //Xaxis.push(parseInt(value.mercury_Id));
                        Yaxis.push(value.hg);
                        Xaxis.push(value.dateTimeStart);

                    });

                    
                    console.log(Xaxis);
                    console.log(Yaxis);
                } 
                
            });

            // Create the chart.js data structure using 'labels' and 'data'

            var tempData = {
                
                labels: Xaxis,
                datasets: [
                    {
                        label: "Mercury in ng/m3 Units",
                        fill: true,
                        backgroundColor: "#eebcde",
                        borderColor: "#eebcde",
                        borderCapStyle: 'butt',
                        borderDash: [5, 5],
                        fillColor: "rgba(151,187,205,0.2)",
                        strokeColor: "rgba(151,187,205,1)",
                        pointColor: "rgba(151,187,205,1)",
                        pointStrokeColor: "#fff",
                        pointHighlightFill: "#fff",
                        pointHighlightStroke: "rgba(151,187,205,1)",

                        data: Yaxis
                    }
                ]
            };

            // Get the context of the canvas element we want to select
            var canvas = document.getElementById("canvas");
            var ctx = canvas.getContext("2d");

            // Instantiate a new chart
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: tempData,
                options: {
                    responsive: true,
                    legend: {
                        position: 'bottom',
                        labels: {
                            fontColor: 'rgb(255, 99, 132)'
                        }
                    },
                    hover: {
                        mode: 'label'
                    },

                    animation: {
                        duration: 8000,
                        numSteps: 50
                    },
                    scales: {
                        xAxes: [{
                            display: true,
                            ticks: {
                                beginAtZero: true,
                                steps: 1,
                                stepValue: 1,
                                max: 50
                            },
                            scaleLabel: {
                                display: false,
                                labelString: 'Time'
                            }
                        }],
                        yAxes: [{
                            display: true,
                            ticks: {
                                beginAtZero: true,
                                steps: 1,
                                stepValue: 1,
                                max: 3
                            },
                            scaleLabel: {
                                display: true,
                                labelString: 'ng/m3'
                            }
                        }]
                    },
                    title: {
                        display: true,
                        text: 'Line Chart'
                    }
                }

            });

        }

        drawLineChart();

    </script>



<h2>Mercury Measurments In Table format</h2>
<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.DateTimeStart)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Hg)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Unit)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.DateTimeStart)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Hg)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Unit)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Mercury_Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Mercury_Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Mercury_Id })
        </td>
    </tr>
}

</table>
